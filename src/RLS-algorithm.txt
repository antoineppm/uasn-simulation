This is a description of a multi-stage, TDOA-based localization scheme: "Reactive Localization Scheme" (RLS)

(we are assuming transmissions are never lost)

Nodes must do three things:
- register the position of nearby nodes
- calculate their own position
- participate in localizing other nodes

REGISTERING THE POSITION OF NEARBY NODES

When a node calculate its position, it broadcasts it in a "position" message. All nodes who receive it (no matter their status) register it.

Typically, several nodes will be localized roughly at the same time. To avoid message collisions, these "position" messages must be staggered: see AVOIDING COLLISIONS below.

CALCULATING THEIR OWN POSITION

Localization is done using the UPS method, repeated with different anchor sets to cover the entire network. Nodes to be localized listen to the anchors and calculate their own position based on the time differences of arrival.

The same node can be localized several times, giving it several position estimates. Its definitive position estimate is calculated from these results.

LOCATING NEW NODES

Anchor sets are chosen by unlocalized nodes, who attempt to find good sets among their registered neighbors, then make a request.

The anchors then do a fixed number of UPS beaconing cycles. On the first cycle they also broadcast their estimated position (which may have changed since they first calculated it, see above). The last beacon transmission prompts all nodes to estimate their position from the 

Hence, the method consists of the following steps:
- unlocalized node request anchors among its localized neighbors
- anchors use the UPS method to locate nodes around them
- newly localized nodes broadcast their position
- repeat until all nodes are localized

LOCATING ANCHORS

Before it can serve as an anchor, a node must be precisely located using a TOA method.
- a new anchor-to-be sends a message "ping"
- all nearby current and past anchors reply with a message "ack" indicating the retransmission delay

AVOIDING COLLISIONS

Because of the nature of underwater communications, transmissions by separate nodes need to be staggered in time. In particular:

1) Position broadcasts must not overlap each other. This is likely to be a problem because nodes are located in batches.

2) Anchor requests must not conflict. That is, if two concurrent requests are made by different nodes in close succession, all concerned nodes must receive the first request before the second to ensure it is carried out correctly.

3) Anchor requests should not be sent while there are still pending position broadcasts nearby. This is not a hard requirement however.

The simplest way to achieve this without extraneous communications is to assign a timeslot to each node. This only require a rough synchronization, which we assume can be achieved with low-precision clocks. The timeslots need to be long enough to account for propagation speed, message length, and clock drift.

This method solves 1) and 2): nowhere in the network will two nodes be transmitting at the same time.

To meet the requirement 3), nodes will not make request if they received a position broadcast within the last half-cycle (waiting a cycle more for all the nodes to make their broadcast).

Anchor messages are not bound to these timeslots and supersede them. A node that has received such a message recently will not transmit, even during its timeslot.

ANCHOR SET SELECTION

All neigboring nodes need to be tested against each other in sets of 4 to determine the best fit (complexity O(n⁴), if done when receiving new position O(n³) each time)

Selection is done by calculating the "triple product" of the anchors: AB.(ACxAD), for the anchor positions A, B, C, D (the result is the same no matter the order of the anchors). It is indicative both of shape ("flat" anchor sets have a lower score") and size.

Another factor serves to limit error accumulations. Each node is assigned an "error rating", according to the following rules:
- nodes whose location is known a priori have a rating of 0
- nodes located in previous iterations have the rating of their highest-rated anchor, plus 1.

The error rating of the candidate anchors is factored in the selection (anchors with a higher rating are less likely to be selected)

NODE STATUS

There are three primary states:
"UNLOCALIZED"	node that does not know its location, can make requests
"LOCALIZED"	node that was roughly located through UPS, can become an anchor
"ANCHOR"	node that was precisely located through TOA

For each of these states, the node can have a secondary state

UNLOCALIZED/idle
The node is not localized, and cannot make requests due to ongoing position broadcasts
Initial state for unlocalized nodes
START	initial state
	when receiving "position" message in certain timeslots
	after failed localization
END	on timeslot (-> /requesting)
	when localized (-> LOCALIZED/broadcasting)

UNLOCALIZED/requesting
The node is not localized, but ready to make a request
START	on timeslot (from idle)
END	when localized (-> LOCALIZED/new)
	when receiving "position" message in certain timeslots (-> /idle)
SILENCE	"request" "confirm" "ping" "ack" "beacon" 2 timeslot

LOCALIZED/new
The node has calculated a position estimate, but has not yet broadcast it
START	when localized (from UNLOCALIZED/)
END	when broadcasting position (-> /ready)
SILENCE	"request" "confirm" "ping" "ack" "beacon" 2 timeslot

LOCALIZED/ready
The node has a position estimate and broadcast it, it can be used as anchor
START	when broadcasting position (from /new)
END	on request (-> /anchor)

LOCALIZED/confirming
The node has been requested as an anchor
START	on request (from /ready)
END	on confirmation (-> /toa)
TIMEOUT	"confirm" 1 timeslot, "ping" 3 timeslot (-> /ready)

LOCALIZED/toa
The node has been requested and is in the process of localizing itself with TOA
START	on confirmation (from /confirming)
TIMEOUT	2 timeslot (-> ANCHOR/active if localization successful, else LOCALIZED/ready)

ANCHOR/confirming
The node has been requested as an anchor
START	on request (from /ready)
END	on confirmation (-> /active)
TIMEOUT	"confirm" 1 timeslot, "ping" 3 timeslot (-> /ready)

ANCHOR/active
The node is currently serving as an anchor for localizing nearby nodes
START	on TOA localization (from LOCALIZED/toa)
	on confirmation (from /confirming)
END	when beaconing ends (-> /ready)
TIMEOUT "confirm" "beacon" 1 timeslot, "ping" 3 timeslot (-> /ready)

ANCHOR/ready
This node has served as an anchor in the past and has been located precisely through TOA
START	when beaconing ends (from /active)
END	on request (-> /confirming)

ANCHOR/init
Initial state for localized nodes
START	initial state
END	when broadcasting position (-> /ready)

MESSAGES

All message have the following format:
sender object data

sender 		the name of the node sending the message
object		identifies the type of message
data		additional information (there can be no data)

"position" x y z
Position broadcast from a newly localized node
ALL			register the neighbor node
UNLOCALIZED		rate and register new anchor sets

"request" node0 node1 node2 node3
Request sent by an unlocalized node to neighbor nodes
LOCALIZED/ready		if concerned: become /confirming
ANCHOR/ready		if concerned: become /confirming
ELSE			temporary silence

"confirm" level x y z
Anchor confirmation sent by an "anchor-active" node
LOCALIZED/confirming	if concerned: send "ping", become /toa
ANCHOR/confirming	if concerned: send "confirm", become /active
ELSE			temporary silence

"ping"
Request of TOA localization sent by an "anchor-new" node
ANCHOR			send back "ack"
ELSE			temporary silence

"ack" node delay
Reply to a "ping" message sent by all nearby anchor nodes
LOCALIZED/toa		if concerned: register data

"beacon" level count delay
Message sent by anchors for the localization process
ANCHOR/active		if concerned: send "beacon"
ELSE			register data, temporary silence


















